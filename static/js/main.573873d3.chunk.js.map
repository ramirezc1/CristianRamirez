{"version":3,"sources":["components/LoadingSpinner.jsx","components/ErrorBoundary.jsx","App.jsx","serviceWorkerRegistration.js","index.jsx"],"names":["LoadingSpinner","styled","div","ErrorBoundary","props","state","hasError","this","children","React","Component","Home","lazy","About","Portfolio","Contact","App","fallback","path","process","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","GlobalStyle","createGlobalStyle","ReactDOM","render","theme","textColor","linkColor","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"2cAEA,IAAMA,E,MAAiBC,EAAOC,IAAV,KAYLF,O,0JCaAG,E,kDAvBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,UAAU,GAFR,E,qDAST,IACAA,EAAaC,KAAKF,MAAlBC,SACAE,EAAaD,KAAKH,MAAlBI,SACR,OAAIF,EACK,gEAGFE,K,kDAVP,MAAO,CAAEF,UAAU,O,GAPKG,IAAMC,W,QCG5BC,EAAOC,gBAAK,kBAAM,gCAClBC,EAAQD,gBAAK,kBAAM,gCACnBE,EAAYF,gBAAK,kBAAM,sDACvBG,EAAUH,gBAAK,kBAAM,gCAyBZI,EAvBH,kBACV,mCACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,EAAD,UACE,eAAC,WAAD,CAAUC,SAAU,cAACjB,EAAA,EAAD,IAApB,UACE,cAAC,IAAD,CAAOkB,KAAI,UAAKC,mBAAL,KAAgCC,OAAK,EAACC,UAAWV,IAC5D,cAAC,IAAD,CAAOO,KAAI,UAAKC,mBAAL,UAAqCE,UAAWR,IAC3D,cAAC,IAAD,CACEK,KAAI,UAAKC,mBAAL,cACJE,UAAWP,IAEb,cAAC,IAAD,CACEI,KAAI,UAAKC,mBAAL,YACJE,UAAWN,gBCVnBO,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhC,QACf0B,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,+GAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,gsCC3FjE,IAKMC,EAAcC,YAAH,KA0BjBC,IAASC,OACP,cAAC,IAAD,UACE,eAAC,IAAD,CAAeC,MAjCL,CACZC,UAAW,OACXC,UAAW,WA+BT,UACE,cAACN,EAAD,IACA,cAAC,EAAD,SAGJO,SAASC,eAAe,SDrBnB,SAAkBzB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIyB,IAAIrC,mBAAwBK,OAAOC,SAASgC,MACpDC,SAAWlC,OAAOC,SAASiC,OAIvC,OAGFlC,OAAOmC,iBAAiB,QAAQ,WAC9B,IAAM9B,EAAK,UAAMV,mBAAN,sBAEPG,IAgEV,SAAiCO,EAAOC,GAEtC8B,MAAM/B,EAAO,CACXgC,QAAS,CAAE,iBAAkB,YAE5B3B,MAAK,SAAC4B,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CnC,UAAUC,cAAcmC,MAAMjC,MAAK,SAACC,GAClCA,EAAaiC,aAAalC,MAAK,WAC7BV,OAAOC,SAAS4C,eAKpBzC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFA4B,CAAwBzC,EAAOC,GAI/BC,UAAUC,cAAcmC,MAAMjC,MAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,OCJ/ByC,K","file":"static/js/main.573873d3.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst LoadingSpinner = styled.div`\n  position: fixed; /* or absolute */\n  top: 50%;\n  left: 50%;\n  width: 1em;\n  height: 1em;\n  border: solid 2px transparent;\n  border-top-color: currentColor;\n  border-left-color: currentColor;\n  border-radius: 50%;\n  animation: ___CSS_0___ 400ms linear infinite;\n`;\nexport default LoadingSpinner;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  render() {\n    const { hasError } = this.state;\n    const { children } = this.props;\n    if (hasError) {\n      return <h1>Loading failed! Please reload.</h1>;\n    }\n\n    return children;\n  }\n}\nErrorBoundary.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default ErrorBoundary;\n","import React, { lazy, Suspense } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { AnimatePresence } from 'framer-motion';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport LoadingSpinner from './components/LoadingSpinner';\n\nconst Home = lazy(() => import('./pages/Home'));\nconst About = lazy(() => import('./pages/About'));\nconst Portfolio = lazy(() => import('./pages/Portfolio'));\nconst Contact = lazy(() => import('./pages/Contact'));\n\nconst App = () => (\n  <>\n    <AnimatePresence>\n      <Switch>\n        <ErrorBoundary>\n          <Suspense fallback={<LoadingSpinner />}>\n            <Route path={`${process.env.PUBLIC_URL}/`} exact component={Home} />\n            <Route path={`${process.env.PUBLIC_URL}/about`} component={About} />\n            <Route\n              path={`${process.env.PUBLIC_URL}/portfolio`}\n              component={Portfolio}\n            />\n            <Route\n              path={`${process.env.PUBLIC_URL}/contact`}\n              component={Contact}\n            />\n          </Suspense>\n        </ErrorBoundary>\n      </Switch>\n    </AnimatePresence>\n  </>\n);\n\nexport default App;\n","/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n// import reportWebVitals from './reportWebVitals';\n\nconst theme = {\n  textColor: 'pink',\n  linkColor: '#ea0f1e',\n};\n\nconst GlobalStyle = createGlobalStyle`\n* {\n  box-sizing: border-box;\n}\n  html,\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'avenir next', avenir, 'helvetica neue', helvetica, ubuntu, roboto, noto, 'segoe ui', arial, sans-serif;\n    color: #ffffff;\n    background-color: #000000;\n    background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100%25' height='100%25' viewBox='0 0 1600 800'%3E%3Cg %3E%3Cpolygon fill='%23210204' points='800 100 0 200 0 800 1600 800 1600 200'/%3E%3Cpolygon fill='%23430409' points='800 200 0 400 0 800 1600 800 1600 400'/%3E%3Cpolygon fill='%2364060d' points='800 300 0 600 0 800 1600 800 1600 600'/%3E%3Cpolygon fill='%23860911' points='1600 800 800 400 0 800'/%3E%3Cpolygon fill='%23a70b15' points='1280 800 800 500 320 800'/%3E%3Cpolygon fill='%23c90d1a' points='533.3 800 1066.7 800 800 600'/%3E%3Cpolygon fill='%23ea0f1e' points='684.1 800 914.3 800 800 700'/%3E%3C/g%3E%3C/svg%3E\");\n    background-attachment: fixed;\n    background-size: cover;\n    font-size: calc(1em + 1vw);\n    width: 100vw;\n    height: 100vh;\n    user-select: none;\n  } \n \n\n`;\n// display: flex;\n// justify-content: center;\n// align-items: center;\n\nReactDOM.render(\n  <Router>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </Router>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n// reportWebVitals();\n"],"sourceRoot":""}